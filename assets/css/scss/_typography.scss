@use 'variables';

// applies a media query based on the specific breakpoint key passed in as a variable
@mixin media-breakpoint-up($breakpoint-size-key) {
  @if map-has-key(variables.$breakpoint-sizes, $breakpoint-size-key) {
    @media only screen and (min-width: map-get(variables.$breakpoint-sizes, $breakpoint-size-key)) { @content; }
  }
}

// create xs spacing classes
@mixin create-xs-font-size-classes($value, $unit_of_measurement) {
  .fs-#{$value} {
    font-size: #{$value}#{$unit_of_measurement};
  }
}

// create spacing classes larger than xs
@mixin create-sm-and-up-font-size-classes($value, $unit_of_measurement, $breakpoint-size-key) {
  .fs-#{$breakpoint-size-key}-#{$value} {
    font-size: #{$value}#{$unit_of_measurement};
  }
}

// create a spacing class for a px value and specific media breakpoint
@mixin font-size-class($value, $unit_of_measurement) {
  @each $breakpoint-size-key, $breakpoint-size in variables.$breakpoint-sizes {
    // apply media query to breakpoint size
    @include media-breakpoint-up($breakpoint-size-key) {
      @if $breakpoint-size-key == xs {
        @include create-xs-font-size-classes($value, $unit_of_measurement);
      }
      @else {
        @include create-sm-and-up-font-size-classes($value, $unit_of_measurement, $breakpoint-size-key);
      }
    }
  }
}